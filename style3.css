/* css에서는 카멜케이스 쓰면 안됨 */

.grid-container {
  /* display grid를 통해 grid contaier 생성, 행열 구분 필요 */
  display: grid;
  /* 열에 해당하는 원소들의 세로에게 각각 100px을 주겠다 */
  grid-template-columns: repeat(3, 100px);
  /* grid-template-columns: repeat(3, 100px); 이렇게 일일이 주지 않고 repeat함수를 쓸 수 있다.  */
  /* 행에 해당하는 원소들의 가로에게 각각 100px을 주겠다.  */
  grid-template-rows: repeat(2, minmax(100px, auto));
  /* minmax를 통해 최소크기와 최대크기를 지정할 수 있다 */
  /* 또한 grid layout은 columns에게 더 우선권이 있다 */

  grid-auto-rows: 100px;
  /* grid-template-rows에 없는 가로가 있다면 그 녀석에게는 무조건 100px를 주라 */

  column-gap: 1rem;
  /* 열 사이를 띄운다 */

  row-gap: 1rem;
  /* 행 사이를 띄운다 */

  /* align-items: start; */
  /* flex가 아니기에 start, end로 정렬해야 한다. 그런데 다른 속성도 css가 허용은 한다.  */
  /* justify-items: start; */
}

.grid-item {
  color: white;
  background-color: #ff5252;
}

.grid-item:nth-child(2n) {
  background-color: #bf5e5e;
}

.grid-item:nth-child(3n) {
  background-color: green;
}

.grid-item:nth-child(4n) {
  background-color: orange;
}

.item2 {
  /* 이렇게 item2를 두 개의 칸을 차지하게 할 수 있다.
  아래의 숫자는 해당 grid에 대한 html상에서의 숫자를 의미한다.  */
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row: 1 / 3; /* 이렇게 한번에 쓸 수도 있다 */
  /* grid-row: 1 / span 2;  1번에서 2칸 간다는 의미 */
}
